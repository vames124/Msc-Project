name: Setup AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
        type: choice
        options:
        - us-east-1
        - us-west-2
        - eu-west-1
        - ap-southeast-1

env:
  AWS_REGION: ${{ github.event.inputs.region || 'us-east-1' }}
  EB_APPLICATION_NAME: ecommerce-demo
  S3_BUCKET_NAME: ecommerce-demo-frontend

jobs:
  setup-infrastructure:
    name: Setup AWS Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get AWS Account ID
      id: get-account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "AWS Account ID: $ACCOUNT_ID"
        
    - name: Create IAM role for Elastic Beanstalk
      run: |
        echo "üîê Creating IAM role for Elastic Beanstalk..."
        
        # Create trust policy
        cat > trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
        
        # Create role if it doesn't exist
        aws iam create-role \
          --role-name aws-elasticbeanstalk-ec2-role \
          --assume-role-policy-document file://trust-policy.json || echo "‚úÖ Role already exists"
          
        # Attach policy
        aws iam attach-role-policy \
          --role-name aws-elasticbeanstalk-ec2-role \
          --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier || echo "‚úÖ Policy already attached"
          
        # Create instance profile
        aws iam create-instance-profile \
          --instance-profile-name aws-elasticbeanstalk-ec2-role || echo "‚úÖ Instance profile already exists"
          
        # Add role to instance profile
        aws iam add-role-to-instance-profile \
          --instance-profile-name aws-elasticbeanstalk-ec2-role \
          --role-name aws-elasticbeanstalk-ec2-role || echo "‚úÖ Role already in instance profile"
          
        echo "‚úÖ IAM role setup completed"
        
    - name: Create security group
      run: |
        echo "üõ°Ô∏è Creating security group..."
        
        # Get VPC ID
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
        echo "Using VPC: $VPC_ID"
        
        # Create security group
        SG_ID=$(aws ec2 create-security-group \
          --group-name ecommerce-demo-sg \
          --description "Security group for ecommerce demo application" \
          --vpc-id $VPC_ID \
          --query 'GroupId' \
          --output text 2>/dev/null || \
          aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=ecommerce-demo-sg" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)
            
        echo "Security Group ID: $SG_ID"
        
        # Add inbound rules
        echo "Adding inbound rules..."
        aws ec2 authorize-security-group-ingress \
          --group-id $SG_ID \
          --protocol tcp \
          --port 80 \
          --cidr 0.0.0.0/0 || echo "‚úÖ HTTP rule already exists"
          
        aws ec2 authorize-security-group-ingress \
          --group-id $SG_ID \
          --protocol tcp \
          --port 443 \
          --cidr 0.0.0.0/0 || echo "‚úÖ HTTPS rule already exists"
          
        aws ec2 authorize-security-group-ingress \
          --group-id $SG_ID \
          --protocol tcp \
          --port 22 \
          --cidr 0.0.0.0/0 || echo "‚úÖ SSH rule already exists"
          
        echo "‚úÖ Security group setup completed"
        
    - name: Create S3 bucket for deployment artifacts
      run: |
        echo "ü™£ Creating S3 bucket for deployment artifacts..."
        
        # Create bucket for storing deployment packages
        aws s3 mb s3://${{ env.S3_BUCKET_NAME }} || echo "‚úÖ Bucket already exists"
          
        echo "‚úÖ S3 bucket for deployment artifacts created"
        
    - name: Create Elastic Beanstalk application
      run: |
        echo "‚òÅÔ∏è Creating Elastic Beanstalk application..."
        
        aws elasticbeanstalk create-application \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --description "E-commerce demo application" || echo "‚úÖ Application already exists"
          
        echo "‚úÖ Elastic Beanstalk application setup completed"
        
    - name: Setup summary
      run: |
        echo ""
        echo "üéâ AWS Infrastructure Setup Complete!"
        echo "======================================"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "Account ID: ${{ steps.get-account-id.outputs.account_id }}"
        echo "Elastic Beanstalk Application: ${{ env.EB_APPLICATION_NAME }}"
        echo "S3 Bucket (deployment artifacts): ${{ env.S3_BUCKET_NAME }}"
        echo "Security Group: ecommerce-demo-sg"
        echo "IAM Role: aws-elasticbeanstalk-ec2-role"
        echo ""
        echo "üìù Next Steps:"
        echo "1. Push code to main/master branch to trigger deployment"
        echo "2. Monitor deployment in GitHub Actions"
        echo "3. Check AWS Console for resources"
        echo ""
        echo "üîó Useful AWS Console Links:"
        echo "- Elastic Beanstalk: https://${{ env.AWS_REGION }}.console.aws.amazon.com/elasticbeanstalk/"
        echo "- S3: https://s3.console.aws.amazon.com/s3/"
        echo "- IAM: https://console.aws.amazon.com/iam/"
        echo "- EC2: https://${{ env.AWS_REGION }}.console.aws.amazon.com/ec2/"
